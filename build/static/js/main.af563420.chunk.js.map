{"version":3,"sources":["api.js","components/WeatherDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["apiKey","process","REACT_APP_API_KEY","apiKey2","REACT_APP_API_KEY2","locationKey","REACT_APP_LOCATION_KEY","console","log","apiCallToday","location","lat","weatherData","a","fetch","long","then","res","json","catch","apiResponse","apiCallYesterday","time","Math","floor","Date","now","apiCallLocale","locationData","WeatherDisplay","useState","apiDataToday","setApiDataToday","apiDataYesterday","setApiDataYesterday","apiDataLocation","setApiDataLocation","useEffect","returnApiDataToday","returnApiDataYesterday","returnApiDataLocation","className","locality","tempMessage","tempDifference","round","current","temp","temperatureDifference","src","weather","icon","alt","feels_like","description","App","userLocation","setUserLocation","errorMessage","setErrorMessage","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","err","message","LocationErrorDisplay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af563420.chunk.js","sourcesContent":["\nconst apiKey = process.env.REACT_APP_API_KEY;\nconst apiKey2 = process.env.REACT_APP_API_KEY2;\nconst locationKey = process.env.REACT_APP_LOCATION_KEY;\n\nconsole.log(process.env.REACT_APP_API_KEY);\n\n// api call for today's weather\nexport const apiCallToday = (location) => {\n    console.log(location.lat);\n    const weatherData = async () => {\n        const apiResponse = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${location.lat}&lon=${location.long}&exclude=hourly,daily,minutely,alerts&units=metric&appid=${apiKey}`)\n            .then((res) => res.json())\n            .catch(() => null);\n        return apiResponse;\n    }\n    console.log(weatherData());\n    return weatherData();\n}\n\n// api call for yesterday's weather\nexport const apiCallYesterday = (location) => {\n    const weatherData = async () => {\n        // get time stamp for 24 hours previous to call (8640000 milliseconds in a day)\n        const time = Math.floor((Date.now() / 1000) - 86400);\n        console.log(time)\n        const apiResponse = await fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${location.lat}&lon=${location.long}&dt=${time}&units=metric&appid=${apiKey2}`)\n            .then((res) => res.json())\n            .catch(() => null);\n        return apiResponse;\n    }\n    console.log(weatherData());\n    return weatherData();\n}\n\n// transform geolocation co-ordinates into locale information\nexport const apiCallLocale = (location) => {\n    const locationData = async () => {\n        const apiResponse = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-with-timezone?latitude=${location.lat}&longitude=${location.long}&localityLanguage=en&key=${locationKey}`)\n            .then((res) => res.json())\n            .catch(() => null);\n        return apiResponse;\n    }\n    console.log(locationData())\n    return locationData();\n}\n","import React, { useEffect, useState } from \"react\";\nimport { apiCallToday, apiCallYesterday, apiCallLocale } from \"../api\";\n\nconst WeatherDisplay = ({ location }) => {\n    console.log(location);\n\n    const [apiDataToday, setApiDataToday] = useState(null);\n    const [apiDataYesterday, setApiDataYesterday] = useState(null);\n    const [apiDataLocation, setApiDataLocation] = useState(null);\n\n    useEffect(() => {\n        console.log(location)\n\n        if (location !== null) {\n            const returnApiDataToday = async () => {\n                await apiCallToday(location).then((res) => setApiDataToday(res));\n            };\n\n            returnApiDataToday();\n\n            const returnApiDataYesterday = async () => {\n                await apiCallYesterday(location).then((res) => setApiDataYesterday(res));\n            }\n\n            returnApiDataYesterday();\n\n            const returnApiDataLocation = async () => {\n                await apiCallLocale(location).then((res) => setApiDataLocation(res));\n            }\n\n            returnApiDataLocation();\n        }\n    }, [location]);\n\n    const locality = () => {\n        if (apiDataLocation !== null) {\n            return (\n                <div>\n                    <h2>Location: {apiDataLocation.locality}</h2>\n                </div>\n            )\n        }\n        else return 'loading';\n    }\n\n    const yesterdaysWeatherDisplay = () => {\n        if (apiDataYesterday !== null) {\n            return (\n                <div className=\"card\">\n                    <h3>Yesterday</h3>\n                    <img src={`https://openweathermap.org/img/wn/${apiDataYesterday.current.weather[0].icon}@2x.png`} alt=\"\" />\n                    <h4>Temperature 24 hours ago: {apiDataYesterday.current.temp} Celsius</h4>\n                    <h4>Felt like: {apiDataYesterday.current.feels_like} Celsius</h4>\n                    <h4>Weather conditions: {apiDataYesterday.current.weather[0].description}</h4>\n                </div>\n            )\n        }\n        else return 'loading';\n    }\n\n    const todaysWeatherDisplay = () => {\n        if (apiDataToday !== null) {\n            return (\n                <div className=\"card\">\n                    <h3>Today</h3>\n                    <img src={`https://openweathermap.org/img/wn/${apiDataToday.current.weather[0].icon}@2x.png`} alt=\"\" />\n                    <p>Temperature now: {apiDataToday.current.temp} Celsius</p>\n                    <p>Feels like: {apiDataToday.current.feels_like} Celsius</p>\n                    <p>Weather conditions: {apiDataToday.current.weather[0].description}</p>\n                </div>\n            )\n        }\n        else return 'loading';\n    }\n\n    const temperatureDifference = () => {\n        let tempMessage = \"\";\n        if (apiDataYesterday !== null && setApiDataToday !== null) {\n            const tempDifference = Math.round(apiDataYesterday.current.temp - apiDataToday.current.temp);\n            console.log(tempDifference);\n            if (tempDifference > 0) {\n                tempMessage = `This time yesterday was it warmer than today by ${tempDifference} Celsius.`;\n            }\n            else if (tempDifference < 0) {\n                tempMessage = `It is ${tempDifference * -1} Celsius warmer today than this time yesterday.`;\n            }\n            else tempMessage = \"It is about the same temperature today as it was this time yesterday.\";\n            return tempMessage;\n        }\n        return (\n            <div><p>{tempMessage}</p></div>\n        )\n    }\n\n\n    return (\n        <div className=\"container\">\n            {locality()}\n            {temperatureDifference()}\n            <div className=\"card-container\">\n                {yesterdaysWeatherDisplay()}\n                {todaysWeatherDisplay()}\n            </div>\n        </div>\n    )\n}\n\nexport default WeatherDisplay;","\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport WeatherDisplay from './components/WeatherDisplay';\n\nfunction App() {\n\n  const [userLocation, setUserLocation] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    const locationFinder = () => {\n      window.navigator.geolocation.getCurrentPosition(\n        position => {\n          setUserLocation({ lat: position.coords.latitude, long: position.coords.longitude })\n        },\n        err => setErrorMessage(err.message),\n\n      )\n    };\n\n    locationFinder();\n  }, [])\n\n  const LocationErrorDisplay = () => {\n    if (errorMessage) {\n      return <div>{errorMessage}</div>\n    }\n    else return null;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Yesterday's weather</h1>\n\n      </header>\n      <main>\n        <WeatherDisplay location={userLocation} />\n        <LocationErrorDisplay />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}